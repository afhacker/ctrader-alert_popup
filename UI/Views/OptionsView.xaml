<UserControl
    x:Class="cAlgo.API.Alert.UI.Views.OptionsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:local="clr-namespace:cAlgo.API.Alert.UI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="300"
    d:DesignWidth="300"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Resources/OptionsViewResources.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding Path=LoadedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Unloaded">
            <i:InvokeCommandAction Command="{Binding Path=UnloadedCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <ScrollViewer>
        <TabControl
            ScrollViewer.CanContentScroll="True"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            TabStripPlacement="Left">
            <TabItem Header="General">
                <StackPanel Orientation="Vertical">
                    <GroupBox Header="Theme">
                        <WrapPanel>
                            <controls:MetroHeader Header="Base">
                                <ComboBox
                                    DisplayMemberPath="Name"
                                    ItemsSource="{Binding Path=ThemeBases}"
                                    SelectedItem="{Binding Path=Model.General.ThemeBase, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=GeneralOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Accent">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxAccentItemTemplate}"
                                    ItemsSource="{Binding Path=ThemeAccents}"
                                    SelectedItem="{Binding Path=Model.General.ThemeAccent, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=GeneralOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>
                        </WrapPanel>
                    </GroupBox>
                </StackPanel>
            </TabItem>
            <TabItem Header="Alerts">
                <StackPanel Orientation="Vertical">
                    <GroupBox Header="Colors">
                        <WrapPanel>
                            <controls:MetroHeader Header="Buy Side">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.BuySideColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Sell Side">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.SellSideColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Symbol">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.SymbolColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Time">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.TimeColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Triggered By">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.TriggeredByColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader HorizontalAlignment="Left" Header="Time Frame">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxColorItemTemplate}"
                                    ItemsSource="{Binding Path=Colors}"
                                    SelectedItem="{Binding Path=Model.Alerts.TimeFrameColor, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>
                        </WrapPanel>
                    </GroupBox>

                    <GroupBox Header="Comment Font">
                        <WrapPanel>
                            <controls:MetroHeader Header="Family">
                                <ComboBox
                                    DisplayMemberPath="Source"
                                    ItemsSource="{Binding Path=Fonts}"
                                    SelectedItem="{Binding Path=Model.Alerts.CommentFontModel.Family, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Weight">
                                <ComboBox
                                    DisplayMemberPath="Name"
                                    ItemsSource="{Binding Path=FontWeights}"
                                    SelectedItem="{Binding Path=Model.Alerts.CommentFontModel.WeightModel, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Style">
                                <ComboBox
                                    DisplayMemberPath="Name"
                                    ItemsSource="{Binding Path=FontStyles}"
                                    SelectedItem="{Binding Path=Model.Alerts.CommentFontModel.StyleModel, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Size">
                                <controls:NumericUpDown
                                    HasDecimals="True"
                                    Interval="1"
                                    Minimum="1"
                                    Value="{Binding Path=Model.Alerts.CommentFontModel.Size}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="ValueChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </controls:NumericUpDown>
                            </controls:MetroHeader>
                        </WrapPanel>
                    </GroupBox>

                    <GroupBox Header="Time">
                        <WrapPanel>
                            <controls:MetroHeader Header="Format">
                                <ComboBox
                                    ItemTemplate="{StaticResource ComboBoxEnumItemTemplate}"
                                    ItemsSource="{Binding Path=TimeFormats}"
                                    SelectedItem="{Binding Path=Model.Alerts.TimeFormat, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>

                            <controls:MetroHeader Header="Zone">
                                <ComboBox ItemsSource="{Binding Path=TimeZones}" SelectedItem="{Binding Path=Model.Alerts.TimeZone, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </controls:MetroHeader>
                        </WrapPanel>
                    </GroupBox>

                    <controls:MetroHeader HorizontalAlignment="Left" Header="Maximum Alert #">
                        <controls:NumericUpDown
                            HasDecimals="False"
                            Interval="1"
                            Maximum="200"
                            Minimum="1"
                            Value="{Binding Path=Model.Alerts.MaxAlertNumber}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="ValueChanged">
                                    <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                    <i:InvokeCommandAction Command="{Binding Path=AlertOptionsChangedCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </controls:NumericUpDown>
                    </controls:MetroHeader>
                </StackPanel>
            </TabItem>
            <TabItem Header="Sound">
                <StackPanel Orientation="Vertical">
                    <controls:ToggleSwitch
                        Margin="5"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Header="Enable Sound Alert"
                        IsChecked="{Binding Path=Model.Sound.IsEnabled, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="IsCheckedChanged">
                                <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                <i:InvokeCommandAction Command="{Binding Path=SoundOptionsChangedCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </controls:ToggleSwitch>

                    <Grid IsEnabled="{Binding Path=Model.Sound.IsEnabled}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBox
                            Grid.Column="0"
                            Margin="5"
                            Text="{Binding Path=Model.Sound.FilePath, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="TextChanged">
                                    <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                    <i:InvokeCommandAction Command="{Binding Path=SoundOptionsChangedCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>

                        <Button
                            Grid.Column="1"
                            Command="{Binding Path=BrowserSoundFileCommand}"
                            Content="Browse"
                            Style="{StaticResource CustomizedSquareButtonStyle}" />
                    </Grid>
                </StackPanel>
            </TabItem>
            <TabItem Header="Email">
                <StackPanel Orientation="Vertical">
                    <controls:ToggleSwitch
                        Margin="5"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Header="Enable Email Alert"
                        IsChecked="{Binding Path=Model.Email.IsEnabled, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="IsCheckedChanged">
                                <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                <i:InvokeCommandAction Command="{Binding Path=EmailOptionsChangedCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </controls:ToggleSwitch>

                    <StackPanel IsEnabled="{Binding Path=Model.Email.IsEnabled}" Orientation="Vertical">
                        <controls:MetroHeader Header="Sender">
                            <TextBox Text="{Binding Path=Model.Email.Sender, Mode=TwoWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="TextChanged">
                                        <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                        <i:InvokeCommandAction Command="{Binding Path=EmailOptionsChangedCommand}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                        </controls:MetroHeader>

                        <controls:MetroHeader Header="Recipient">
                            <TextBox Text="{Binding Path=Model.Email.Recipient, Mode=TwoWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="TextChanged">
                                        <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                        <i:InvokeCommandAction Command="{Binding Path=EmailOptionsChangedCommand}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                        </controls:MetroHeader>

                        <Expander
                            Margin="5"
                            Header="Template"
                            IsExpanded="False">
                            <StackPanel Orientation="Vertical">
                                <controls:MetroHeader Header="Subject">
                                    <TextBox Text="{Binding Path=Model.Email.Template.Subject, Mode=TwoWay}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="TextChanged">
                                                <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                                <i:InvokeCommandAction Command="{Binding Path=EmailOptionsChangedCommand}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </controls:MetroHeader>
                                <controls:MetroHeader Header="Body">
                                    <TextBox
                                        Height="100"
                                        Text="{Binding Path=Model.Email.Template.Body, Mode=TwoWay}"
                                        TextWrapping="Wrap">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="TextChanged">
                                                <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                                <i:InvokeCommandAction Command="{Binding Path=EmailOptionsChangedCommand}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </controls:MetroHeader>
                                <Button
                                    HorizontalAlignment="Right"
                                    Command="{Binding Path=ResetEmailTemplateCommand}"
                                    Content="Reset"
                                    Style="{StaticResource CustomizedAccentedSquareButtonStyle}" />
                                <FlowDocumentScrollViewer ScrollViewer.VerticalScrollBarVisibility="Hidden">
                                    <FlowDocument>
                                        <Paragraph FontWeight="Bold">
                                            Keywords
                                        </Paragraph>
                                        <Paragraph>
                                            {TradeSide}, {Symbol}, {TimeFrame}, {Time}, {Comment}, and {TriggeredBy}
                                        </Paragraph>
                                        <Paragraph>
                                            You can use any of the above keywords in email subject or body
                                        </Paragraph>
                                    </FlowDocument>
                                </FlowDocumentScrollViewer>
                            </StackPanel>
                        </Expander>
                    </StackPanel>

                    <FlowDocumentScrollViewer ScrollViewer.VerticalScrollBarVisibility="Hidden">
                        <FlowDocument>
                            <Paragraph FontWeight="Bold">
                                Important
                            </Paragraph>
                            <Paragraph>
                                The email alert only works if you already configured your cTrader platform email notification settings
                            </Paragraph>
                        </FlowDocument>
                    </FlowDocumentScrollViewer>
                </StackPanel>
            </TabItem>
            <TabItem Header="Telegram">
                <StackPanel Orientation="Vertical">
                    <controls:ToggleSwitch
                        Margin="5"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Header="Enable Telegram Bot Alert"
                        IsChecked="{Binding Path=Model.Telegram.IsEnabled, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="IsCheckedChanged">
                                <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                <i:InvokeCommandAction Command="{Binding Path=TelegramOptionsChangedCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </controls:ToggleSwitch>

                    <StackPanel IsEnabled="{Binding Path=Model.Telegram.IsEnabled}" Orientation="Vertical">
                        <controls:MetroHeader Header="Bot Token">
                            <TextBox Text="{Binding Path=Model.Telegram.BotToken, Mode=TwoWay}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="TextChanged">
                                        <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                        <i:InvokeCommandAction Command="{Binding Path=TelegramOptionsChangedCommand}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                        </controls:MetroHeader>

                        <GroupBox Margin="5" Header="Message Template">
                            <StackPanel Orientation="Vertical">
                                <TextBox
                                    Height="100"
                                    Text="{Binding Path=Model.Telegram.MessageTemplate, Mode=TwoWay}"
                                    TextWrapping="Wrap">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="TextChanged">
                                            <i:InvokeCommandAction Command="{Binding Path=OptionsChangedCommand}" />
                                            <i:InvokeCommandAction Command="{Binding Path=TelegramOptionsChangedCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </TextBox>
                                <Button
                                    HorizontalAlignment="Right"
                                    Command="{Binding Path=ResetTelegramTemplateCommand}"
                                    Content="Reset"
                                    Style="{StaticResource CustomizedAccentedSquareButtonStyle}" />
                                <FlowDocumentScrollViewer ScrollViewer.VerticalScrollBarVisibility="Hidden">
                                    <FlowDocument>
                                        <Paragraph FontWeight="Bold">
                                            Keywords
                                        </Paragraph>
                                        <Paragraph>
                                            {TradeSide}, {Symbol}, {TimeFrame}, {Time}, {Comment}, and {TriggeredBy}
                                        </Paragraph>
                                        <Paragraph>
                                            You can use any of the above keywords in message
                                        </Paragraph>
                                    </FlowDocument>
                                </FlowDocumentScrollViewer>
                            </StackPanel>
                        </GroupBox>
                    </StackPanel>

                    <FlowDocumentScrollViewer ScrollViewer.VerticalScrollBarVisibility="Hidden">
                        <FlowDocument>
                            <Paragraph FontWeight="Bold">
                                How it works
                            </Paragraph>
                            <Paragraph>
                                After an alert is triggered the alert data is put in the above message template and is send to all bot open chats, so to get alert messages you have to have at least one open chat or conversation with the bot
                            </Paragraph>
                            <Paragraph>
                                <Run Text="To create a telegram bot use" />
                                <Hyperlink Command="{Binding Path=RequestNavigateCommand}" CommandParameter="https://telegram.me/botfather">
                                    <Run Text="@BotFather" />
                                </Hyperlink>
                            </Paragraph>
                        </FlowDocument>
                    </FlowDocumentScrollViewer>
                </StackPanel>
            </TabItem>
        </TabControl>
    </ScrollViewer>
</UserControl>